#!/bin/sh

SKULL_VERSION=$(git describe --always)

usage() {
	printf "skull -v
skull file [ -S | -E | -c ]
           [ -o output ]
           [ -- args]\n"
	exit 0
}

[ -z "$1" ] && usage

# shift params if the first argument is not an option
case "$1" in
	-*) ;;
	*) filename=$1; shift ;;
esac

while getopts ":vhcSEo:m:" o; do
	case "$o" in
		v)
			printf "%b" "\033[92mSkull\033[0m $SKULL_VERSION\n"
			exit 0
			;;
		h) usage; exit 0 ;;
		c) COMPILE=true ;;
		S) ASM=true ;;
		E) PREPRO=true ;;
		o) OUT_FILE=$OPTARG ;;
		*) printf "skull: unknown option \"-%s\"\n" "$OPTARG"; exit 1 ;;
	esac
done

shift $((OPTIND - 1))

"${0%/*}/_skull" "$filename" || exit 1

case "$filename" in
	*".sk") ;;
	*) exit 0 ;;
esac

base=$(dirname "$filename")/.$(basename "$filename")
[ -z "$OUT_FILE" ] && {
	[ -z "$ASM" ] &&
		OUT_FILE=$base.o ||
		OUT_FILE=$base.s;
}

# mimic -E option in cc (print LLVM IR output to screen)
[ -n "$PREPRO" ] &&
	cat "$base.ll" &&
	rm "$base.ll" &&
	exit 0

# mimic -S option in cc (output assembly)
file_type=obj
[ -z "$ASM" ] || file_type=asm

LLC=$(command -v llc-10 || command -v llc)
$LLC "$base.ll" -filetype=$file_type -o "$OUT_FILE" || exit 1

rm "$base.ll"

[ -z "$ASM" ] || exit 0
[ -z "$COMPILE" ] || exit 0

[ ! -d "${filename%.*}" ] || {
	printf "skull: \"%b\" is a directory not a file\n" "${filename%.*}"
	rm "$OUT_FILE"
	exit 1
}

MODULE_NAME=$(basename "${filename%.*}")
SHIM="
_Bool _strcmp(const char *a, const char *b) {
	while (*a && *b) {
		if (*a != *b) {
			return 0;
		}
		a++;
		b++;
	}

	return !*a && !*b;
}

#include <math.h>
double _float_pow(double base, double exp) {
	return pow(base, exp);
}

#include <stdint.h>
int64_t _int_pow(int64_t base, int64_t exp) {
	int64_t result = base;
	for (int64_t i = 1; i < exp; i++) result *= base;
	return result;
}

int main(void) {
	int x(void) __asm__(\".$MODULE_NAME\"); return x();
}
"

printf "%s" "$SHIM" | cc "$OUT_FILE" \
	-o "${filename%.*}" "$@" \
	-I/usr/include/skull \
	-x c - \
	-lm

rm "$OUT_FILE"
